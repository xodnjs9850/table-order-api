openapi: 3.0.0
info:
  title: Sample API
  description: table-order-api
  version: 0.1.9
servers:
  - url: http://127.0.0.1:8000/api
    description: api server
paths:
  /auth/signIn:
    post:
      security: []
      tags:
        - auth
      summary: 로그인
      operationId: signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  pattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                  description: "이메일"
                  example: "test@test.com"
                password:
                  type: string
                  format: password
                  description: 비밀번호
                  example: 1234
      responses:
        "200":
          description: 로그인 성공
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    format: password
                    example: xxxxxx
                    description: 액세스 토큰
                  refreshToken:
                    type: string
                    format: password
                    example: xxxxxxxx
                    description: 갱신용 토큰
        "403":
          description: |
            "유저를 찾을 수 없습니다."
            "패스워드가 일치하지 않습니다."
          content:
            application/json:
              examples:
                "유저를 찾을 수 없습니다.":
                  value:
                    code: HANDLE_ACCESS_DENIED
                    message: "유저를 찾을 수 없습니다."
                "패스워드가 일치하지 않습니다.":
                  value:
                    code: HANDLE_ACCESS_DENIED
                    message: "패스워드가 일치하지 않습니다."
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /auth/signUp:
    post:
      security: []
      tags:
        - auth
      summary: 회원가입
      operationId: signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  pattern: '^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$'
                  description: "이메일"
                  example: "test@test.com"
                password:
                  type: string
                  description: "비밀번호"
                  example: "1234"
                name:
                  type: string
                  example: John Doe
      responses:
        "200":
          description: 회원가입 성공
        "400":
          description: 회원가입 오류
          content:
            application/json:
              examples:
                "이메일이 이미 존재합니다.":
                  value:
                    code: EMAIL_DUPLICATION
                    message: "이메일이 이미 존재합니다."
              schema:
                $ref: "#/components/schemas/ErrorMessage"
  /restaurant:
    put:
      tags:
        - restaurant
      summary: 식당 추가
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurantName:
                  type: string
                  format: string
                  description: 식당 이름
                  example: "김밥천국"
                menuList:
                  type: array
                  items:
                    type: object
                  description: 메뉴 목록
                  example: ["김밥-2000", "라면-3000", "치즈 라면-3500"]
      responses:
        "200":
          description: 식당 추가 성공
        "400":
          description: 식당 추가 실패
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - bearerAuth: [ ]
  /menu/getMenus:
    get:
      tags:
        - menu
      summary: 식당 메뉴 리스트
      parameters:
        - in: query
          name: restaurantName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 식당 메뉴 리스트 조회 성공
          content:
            application/json:
              schema:
                type: array
                menu:
                  type: object
                  properties:
                    name:
                      type: string
                      format: string
                      description: 메뉴 이름
                      example: "김밥"
                    price:
                      type: string
                      description: 가격
                      example: "2500"
        "400":
          description: 식당 메뉴 리스트 조회 실패
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - bearerAuth: [ ]
  /menu/putComment:
    put:
      tags:
        - menu
      summary: 메뉴 코멘트 추가
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurant:
                  type: string
                  format: string
                  description: 식당 이름
                  example: "김밥천국"
                menuName:
                  type: string
                  format: string
                  description: 메뉴 이름
                  example: "김밥"
                comment:
                  type: string
                  format: string
                  description: 메뉴 설명
                  example: "맛있는 단무지 김밥"

      responses:
        "200":
          description: 메뉴 코멘트 추가 성공
        "400":
          description: 메뉴 코멘트 추가 실패
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - bearerAuth: [ ]
  /menu/getMenuComment:
    get:
      tags:
        - menu
      summary: 메뉴 코멘트
      parameters:
        - in: query
          name: restaurantName
          required: true
          schema:
            type: string
        - in: query
          name: menuName
          required: true
          schema:
            type: string
      responses:
        "200":
          description: 식당 메뉴 코멘트 조회 성공
          content:
            application/json:
              schema:
                type: array
                menu:
                  type: object
                  properties:
                    name:
                      type: string
                      format: string
                      description: 메뉴 이름
                      example: "김밥"
                    price:
                      type: string
                      description: 코멘트
                      example: "그냥 김밥"
        "400":
          description: 식당 메뉴 코멘트 조회 실패
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - bearerAuth: [ ]

  /order:
    put:
      tags:
        - order
      summary: 메뉴 주문
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurant:
                  type: string
                  format: string
                  description: 식당 이름
                  example: "김밥천국"
                menus:
                  type: array
                  items:
                    type: object
                  description: 주문 목록
                  example: [ "김밥", "라면", "치즈 라면" ]
      responses:
        "200":
          description: 식당 추가 성공
        "400":
          description: 식당 추가 실패
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - bearerAuth: [ ]

  /order/updateOrder:
    post:
      tags:
        - order
      summary: 장바구니 변경
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurant:
                  type: string
                  format: string
                  description: 식당 이름
                  example: "김밥천국"
                menus:
                  type: array
                  items:
                    type: object
                  description: 주문 목록
                  example: [ "치즈 라면", "김밥" ]
      responses:
        "200":
          description: 장바구니 변경 성공
        "400":
          description: 장바구니 변경 실패
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
      security:
        - bearerAuth: [ ]
security:
  - bearerAuth:
      - UNAUTHORIZED_USER
      - AUTHORIZED_USER
      - MANAGER
      - ADMIN
tags:
  - name: auth
    description: 계정
  - name: restaurant
    description: 식당
  - name: menu
    description: 메뉴
  - name: order
    description: 주문
components:
  schemas:
    ErrorMessage:
      discriminator:
        propertyName: code
        mapping:
          #
          # 400
          EMAIL_DUPLICATION: "#/components/schemas/EmailAlreadyExistsError"
          # 403
          HANDLE_ACCESS_DENIED: "#/components/schemas/NoPermissionError"
        oneOf:
          - $ref: "#/components/schemas/EmailAlreadyExistsError"
          - $ref: "#/components/schemas/NoPermissionError"
    EmailAlreadyExistsError:
      description: "<p>이메일이 이미 존재합니다.</p>"
      type: object
      properties:
        code:
          type: string
          description: "에러코드"
        message:
          type: string
          description: "에러 메세지"
    NoPermissionError:
      description: "<p>권한이 없습니다.</p>"
      type: object
      properties:
        code:
          type: string
          description: "에러코드"
        message:
          type: string
          description: "에러 메세지"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT